# Function to uninstall Java while excluding a specific version and remove leftover directories
function Uninstall-Java {
    [CmdletBinding(SupportsShouldProcess)]
    param (
        [string]$LogPath = "C:\Windows\Logs\Software\UninstallJava.log",
        [string]$ExcludedVersion = "Java 8 Update 431"
    )

    # Ensure log file exists
    if (!(Test-Path $LogPath)) {
        New-Item -ItemType File -Path $LogPath -Force | Out-Null
    }

    # Function to write logs with timestamps
    function Write-Log {
        param ([string]$Message)
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        Add-Content -Path $LogPath -Value "[$timestamp] $Message"
    }

    Write-Log "`n----- Java Uninstallation Log - $(Get-Date) -----`n"
    Write-Host "Gathering installed Java versions..." -ForegroundColor Green

    $uninstallApps = @()

    # Collect Java uninstall entries from registry
    $registryPaths = @(
        "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
        "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    )

    foreach ($path in $registryPaths) {
        if (Test-Path $path) {
            $uninstallApps += @(Get-ChildItem $path -ErrorAction SilentlyContinue |
                ForEach-Object { Get-ItemProperty $_.PSPath } |
                Where-Object { $_.DisplayName -and $_.UninstallString -and ($_.DisplayName -like "Java SE Development Kit*" -or $_.DisplayName -like "Java 8 Update*") })
        }
    }

    # Filter unique Java applications
    $javaApps = $uninstallApps | Sort-Object DisplayName -Unique

    # Log detected installations
    Write-Log "Detected Java versions:"
    foreach ($app in $javaApps) {
        Write-Log " - $($app.DisplayName)"
    }

    $installPaths = @{}
    
    # Process uninstallation
    foreach ($app in $javaApps) {
        if ($app.DisplayName -like "$ExcludedVersion*") {
            Write-Host "$($app.DisplayName) is excluded from uninstallation." -ForegroundColor Yellow
            Write-Log "Excluded: $($app.DisplayName)"

            # Store its installation path to avoid deleting it later
            if ($app.InstallLocation -and (Test-Path $app.InstallLocation)) {
                $installPaths[$app.DisplayName] = $app.InstallLocation
            }
        } else {
            if ($PSCmdlet.ShouldProcess("$($app.DisplayName)", "Uninstall")) {
                try {
                    Write-Host "Uninstalling $($app.DisplayName)..." -ForegroundColor Yellow
                    Write-Log "Attempting to uninstall: $($app.DisplayName)"

                    # Store installation path before uninstalling
                    if ($app.InstallLocation -and (Test-Path $app.InstallLocation)) {
                        $installPaths[$app.DisplayName] = $app.InstallLocation
                    }

                    # Process msiexec uninstall strings
                    if ($app.UninstallString -like "msiexec.exe*") {
                        $uninstallCommand = $app.UninstallString -replace "/I", "/X" -replace "msiexec.exe ", ""
                        $uninstallCommand = "$uninstallCommand /qn"
                        
                        $process = Start-Process -FilePath "msiexec.exe" -ArgumentList $uninstallCommand -Wait -PassThru
                        $exitCode = $process.ExitCode
                    } else {
                        # Handle other uninstall strings
                        $uninstallCommand = $app.UninstallString
                        if ($uninstallCommand.StartsWith('"')) {
                            $process = Start-Process -FilePath ( $uninstallCommand -replace '"', '') -ArgumentList "/S" -Wait -PassThru
                        } else {
                            $process = Start-Process -FilePath $uninstallCommand -ArgumentList "/S" -Wait -PassThru
                        }
                        $exitCode = $process.ExitCode
                    }

                    # Check exit codes
                    if ($exitCode -eq 0 -or $exitCode -eq 1605 -or $exitCode -eq 1614 -or $exitCode -eq 3010) {
                        Write-Host "$($app.DisplayName) uninstalled successfully. Exit code: $exitCode" -ForegroundColor Green
                        Write-Log "Successfully uninstalled: $($app.DisplayName) - Exit code: $exitCode"
                    } else {
                        Write-Error "Failed to uninstall $($app.DisplayName). Exit code: $exitCode"
                        Write-Log "Failed to uninstall: $($app.DisplayName) - Exit code: $exitCode"
                    }
                } catch {
                    Write-Error "Error while uninstalling $($app.DisplayName): $_"
                    Write-Log "Error: $($app.DisplayName) - $_"
                }
            }
        }
    }

    # Remove leftover installation directories (excluding the excluded version)
    if ($installPaths.Count -gt 0) {
        Write-Host "Removing leftover installation directories..." -ForegroundColor Cyan
        Write-Log "Removing leftover Java installation directories..."

        foreach ($entry in $installPaths.GetEnumerator()) {
            $javaVersion = $entry.Key
            $path = $entry.Value

            if ($javaVersion -like "$ExcludedVersion*") {
                Write-Host "Skipping removal of installation folder for excluded version: $javaVersion" -ForegroundColor Yellow
                Write-Log "Skipping directory removal: $path (Excluded Version)"
            } else {
                if (Test-Path $path) {
                    try {
                        Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
                        Write-Host "Removed: $path" -ForegroundColor Green
                        Write-Log "Removed directory: $path"
                    } catch {
                        Write-Error "Failed to remove $path: $_"
                        Write-Log "Failed to remove directory: $path - $_"
                    }
                }
            }
        }
    }

    # Final log entry
    Write-Log "`n----- Uninstallation Completed - $(Get-Date) -----`n"
    Write-Host "Uninstallation process complete. Log saved at $LogPath" -ForegroundColor Cyan
}

# Run the function
Uninstall-Java -LogPath "C:\Windows\Logs\Software\UninstallJava.log" -ExcludedVersion "Java 8 Update 431"

# Set a registry flag indicating uninstallation completion
$RegistryPath = 'HKLM:\Software\ACG\JavaUninstall'
$Name         = 'Removed'
$Value        = '1'

# Ensure registry key exists
if (-NOT (Test-Path $RegistryPath)) {
    New-Item -Path $RegistryPath -Force | Out-Null
}

# Set registry value
New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType String -Force | Out-Null
Write-Host "Registry flag set: $RegistryPath\$Name = $Value" -ForegroundColor Green
https://github.com/stevecapacity/IntunePowershell/blob/main/New%20Teams%20Scripts/Remove%20Classic%20Teams/Remediation/remediate.ps1



https://scloud.work/new-teams-client-and-cleanup-the-classic-intune/
